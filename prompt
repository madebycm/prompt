#!/bin/bash

# Simple text file processor that combines files into a single prompt.txt
#
# Usage:
#   prompt                     # process all text files
#   prompt --ignore main.dart  # everything except main.dart
#   prompt home.dart          # finds and processes single file
#   prompt lib/              # process all files in lib/
#   prompt "*.dart"          # all dart files recursively
#   prompt home.dart,settings.dart  # specific files
#
# Notes:
#   - Searches recursively in current directory
#   - Skips binary files and files >1MB
#   - Outputs to prompt.txt with file headers
#   - Automatically ignores itself and prompt.txt

output_file="prompt.txt"
ignore_files=""
max_size=$((1024 * 1024))  # 1MB in bytes

# Function to clean path (remove double slashes)
clean_path() {
    echo "$1" | sed 's#//#/#g'
}

# Function to check if file is text
is_text_file() {
    local file="$1"
    if file "$file" | grep -q "text\|empty"; then
        return 0
    else
        return 1
    fi
}

# Function to check file size
check_file_size() {
    local file="$1"
    local size=$(stat -f%z "$file")
    if [ "$size" -gt "$max_size" ]; then
        return 1
    fi
    return 0
}

# Function to should_ignore
should_ignore() {
    local file="$1"
    local basename=$(basename "$file")
    
    # Always ignore the script itself and the output file
    if [[ "${file}" == *"prompt/prompt"* ]] || [[ "$basename" == "$output_file" ]]; then
        return 0
    fi
    
    if [ -n "$ignore_files" ]; then
        IFS=',' read -ra IGNORE_ARRAY <<< "$ignore_files"
        for ignore in "${IGNORE_ARRAY[@]}"; do
            if [[ "${file}" == *"${ignore}"* ]]; then
                return 0
            fi
        done
    fi
    return 1
}

# Function to process a single file
process_file() {
    local file="$(clean_path "$1")"
    
    if should_ignore "$file"; then
        echo "Ignoring: $file"
        return
    fi
    
    if ! is_text_file "$file"; then
        echo "Skipping binary file: $file"
        return
    fi

    if ! check_file_size "$file"; then
        echo "Skipping large file: $file (>1MB)"
        return
    fi
    
    echo "Processing: $file"
    echo "// File: $file" >> "$output_file"
    echo "-------------------" >> "$output_file"
    cat "$file" >> "$output_file"
    echo -e "\n\n" >> "$output_file"
}

# Function to find and process a single file
find_and_process() {
    local filename="$1"
    local found_file=$(find . -type f -name "$filename" 2>/dev/null | head -n 1)
    if [ -n "$found_file" ]; then
        process_file "${found_file#./}"
    else
        echo "Not found: $filename"
    fi
}

# Clear output file
> "$output_file"

# Parse arguments
target=""
while [[ $# -gt 0 ]]; do
    case $1 in
        --ignore)
            ignore_files="$2"
            shift 2
            ;;
        *)
            target="$1"
            shift
            ;;
    esac
done

# Process based on target
if [ -z "$target" ]; then
    # No target - process all files
    find . -type f -print0 | while IFS= read -r -d '' file; do
        process_file "${file#./}"
    done
elif [ -d "$target" ]; then
    # Directory
    find "$target" -type f -print0 | while IFS= read -r -d '' file; do
        process_file "$(clean_path "${file#./}")"
    done
elif [[ "$target" == *","* ]]; then
    # Comma-separated list of files
    IFS=',' read -ra FILES <<< "$target"
    for file in "${FILES[@]}"; do
        find_and_process "$file"
    done
elif [[ "$target" == *"*"* ]]; then
    # Glob pattern - search recursively
    find . -type f -name "$target" -print0 | while IFS= read -r -d '' file; do
        process_file "$(clean_path "${file#./}")"
    done
else
    # Single filename
    find_and_process "$target"
fi

echo "Output written to $output_file" 